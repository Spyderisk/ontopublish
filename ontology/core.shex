PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdfg: <http://www.w3.org/2004/03/trix/rdfg-1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX score: <http://ontology.spyderisk.org/ns/core#>
PREFIX scoresh: <http://ontology.spyderisk.org/sh/core#>

# Structural entities

scoresh:StructuralEntityShape {
    a [ score:StructuralEntity ]? ;
    a [ score:AssetRelation score:Asset ] ;
    rdfs:label       rdf:langString? ;
    rdfs:description rdf:langString? ;
}
scoresh:TargetSystemShape {
    a [ score:TargetSystem ] ;
    score:has_structure @scoresh:StructuralEntityShape* ;
}
scoresh:AssetShape {
    a [ score:Asset ] ;
    # Add label/description &c. later?
    # score:has_property @scoresh:AssetPropertyShape* ;
}
scoresh:AssetRelationShape {
    a [ score:AssetRelation ] ;
    rdfs:domain        @scoresh:AssetShape ;
    rdfs:range         @scoresh:AssetShape ;
}



# Organisational entities

# N.B. this is restricted to a type, a broad class of assets.
scoresh:OrganisationalEntityShape {
    a [ score:OrganisationalEntity ] ;
    score:takes_attribute  @scoresh:RoleAttributeShape ;
    score:restricted_to    @scoresh:AssetShape? ;
}
scoresh:RoleAttributeShape {
    a [ score:RoleAttribute ] ;
}



# Causal entities

scoresh:CausalEntityShape {
    a [ score:CausalEntity ]? ;
    a [ score:Threat score:ThreatCause score:ControlStrategy score:AssetProperty ] ;
    score:has_likelihood @scoresh:LikelihoodComponentShape ;
}

scoresh:LikelihoodShape {
    a [ score:Likelihood skos:ConceptScheme ]+ ;
}
scoresh:LikelihoodComponentShape {
    a [ skos:Concept ] ;
    skos:inScheme @scoresh:LikelihoodShape ;
}

scoresh:ThreatShape {
    a [ score:Threat ] ;
    score:incorporates_role @scoresh:OrganisationalEntityShape ;
    score:caused_by        @scoresh:ThreatCauseShape? ;
    score:triggered_by     @scoresh:ControlStrategyShape* ;
}

scoresh:ThreatCauseShape {
    a [ score:ThreatCause ] ;
}
scoresh:ControlStrategyShape {
    a [ score:ControlStrategy ] ;
    scoresh:has_control @scoresh:ControlShape
}
scoresh:ControlShape {
    a [ score:Control ] ;
}
scoresh:AssetPropertyShape {
    a [ score:AssetProperty ]? ;
    a [ score:Control score:AssetBehaviour score:AssetTrustworthiness ] ;
}
#
# Behaviour/trustworthiness interaction
#
# The inverse triple constraint here says that every valid
# BehaviourAttribute must have an edge from some `undermines' edge.
# We can't say the opposite because these edges attribute particular
# edges which are `score:undermines' edges (e.g. `my:rel rdf:type
# score:undermines') but cannot have the identifier `score:undermines'.
# This is where we're really coming up against RDF's poor support for
# making statements about statements, and there is surely a better way.
#
scoresh:AssetBehaviourShape {
    a [ score:AssetBehaviour ] ;
    score:undermines @scoresh:AssetTrustworthinessShape? ;
}

scoresh:AssetTrustworthinessShape {
    a [ score:AssetTrustworthiness ] ;
}

scoresh:underminesShape {
    a [ score:undermines ] ;
    rdfs:domain [ score:AssetBehaviour ] ;
    rdfs:range  [ score:AssetTrustworthiness ] ;
}

scoresh:BehaviourAttributeShape {
    a [ score:BehaviourAttribute ];
    ^score:via @scoresh:underminesShape? ;
}