PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdfg: <http://www.w3.org/2004/03/trix/rdfg-1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX score: <http://ontology.spyderisk.org/ns/core#>
PREFIX scoresh: <http://ontology.spyderisk.org/sh/core#>

# Structural entities

scoresh:StructuralEntityShape {
    rdf:type  rdfs:Class .
}

scoresh:AssetShape {
    rdfs:subClassOf    score:StructuralEntity ;
    score:inScheme     score:StructuralEntityScheme? ;
    score:has_property @scoresh:AssetPropertyShape* .
}
scoresh:AssetRelationShape {
    rdfs:subClassOf    score:StructuralEntity ;
    rdfs:domain        @scoresh:AssetShape ;
    rdfs:range         @scoresh:AssetShape .
}

scoresh:TargetSystemShape {
    rdf:type             rdfs:Class ;
    score:has_structure  @scoresh:StructuralEntityShape .
}

# Organisational entities

scoresh:OrganisationalEntityShape {
    rdf:type               rdfs:Class ;
    score:takes_attribute  @scoresh:RoleAttributeShape ;
    score:restricted_to    @scoresh:AssetShape .
}
scoresh:RoleAttribute {
    rdf:type   rdfs:Class ;
    rdf:type   skos:ConceptScheme .
}

# Causal entities

scoresh:CausalEntityShape {
    score:has_likelihood    @score:LikelihoodShape ;
    skos:inScheme           score:CausalEntityScheme? ;
    skos:broader            @scoresh:CausalEntityShape* ;
    skos:broaderTransitive  @scoresh:CausalEntityShape* ;
    skos:narrower           @scoresh:CausalEntityShape* ;
    skos:narrowerTransitive @scoresh:CausalEntityShape* .
}

scoresh:LikelihoodShape {
    rdf:type   rdf:Class ;
    rdf:type   skos:ConceptScheme .
}

score:ThreatShape {
    # as well as causal entity stuff,
    rdfs:subClassOf score:CausalEntity ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:CausalEntity ;
    score:incorporates_role @scoresh:OrganisationalEntity? ;
    score:caused_by         @scoresh:ThreatCauseShape? ;
    score:triggered_by      @scoresh:ControlStrategyShape* . # 0..n
}

score:ThreatCauseShape {
    # causal entity misc
    rdfs:subClassOf score:CausalEntity ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:CausalEntity .
}

scoresh:ControlStrategyShape {
    rdfs:subClassOf score:ThreatCause ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:ThreatCause ;
    scoresh:has_control    @scoresh:ControlShape
}

scoresh:ControlShape {
    rdfs:subClassOf score:AssetProperty ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:AssetProperty ;
}

scoresh:AssetPropertyShape {
    rdfs:subClassOf score:CausalEntity ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:CausalEntity .
}

# Behaviour/trustworthiness interaction
#
# The inverse triple constraint here says that every valid
# BehaviourAttribute must have an edge from some `undermines' edge.
# We can't say the opposite because these edges attribute particular
# edges which are `score:undermines' edges (e.g. `my:rel rdf:type
# score:undermines') but cannot have the identifier `score:undermines'.
# This is where we're really coming up against RDF's poor support for
# making statements about statements, and there is surely a better way.
#
scoresh:AssetBehaviourShape {
    rdfs:subClassOf score:AssetProperty ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:AssetProperty ;
    score:undermines @scoresh:AssetTrustworthinessShape? .
}

scoresh:AssetTrustworthinessShape {
    rdfs:subClassOf score:AssetProperty ;
    skos:inScheme   score:CausalEntityScheme ;
    skos:broaderTransitive score:AssetProperty .
}

scoresh:underminesShape {
    rdfs:domain score:AssetBehaviour ;
    rdfs:range  score:AssetTrustworthiness .
}

scoresh:BehaviourAttributeShape {
    rdf:type  rdfs:Class ;
    rdf:type  skos:ConceptScheme ;
    ^score:via @scoresh:underminesShape? .
}